
import lib/video.a
import lib/events.a

import lib/loaders/ipx.a
import lib/loaders/ivx.a

import lib/devices/graphics/framebuffer.a
import lib/devices/graphics/shader.a
import lib/devices/graphics/gl.a
//~ import lib/devices/graphics/batch.a

import lib/utils/camera.a

// loading stuff

Texture.filter Texture.FILTER_MAG_BILINEAR | Texture.FILTER_MIN_BILINEAR;
//~ Texture.filter Texture.FILTER_MAG_NONE | Texture.FILTER_MIN_BILINEAR;
Texture->var texture = Ipx.create_texture("perm/development/level.ipx");
Ivx->var ivx = new(Ivx).construct("perm/development/level.ivx");

// create batch

//~ Matrix->var transformation_matrix = new(Matrix).construct();
//~ Batch->var batch = new(Batch).construct();

//~ batch.add_ivx_transform_matrix ivx, transformation_matrix;
//~ transformation_matrix.translate 1.0, 1.0, 1.0;
//~ batch.add_ivx_transform_matrix ivx, transformation_matrix;
//~ batch.clear();

// framebuffer stuff

Framebuffer->var draw_framebuffer = new(Framebuffer).construct(800, 480);
Framebuffer->var bloom_threshold_framebuffer = new(Framebuffer).construct(800 / 2, 480 / 2);
Framebuffer->var bloom_blur_x_framebuffer = new(Framebuffer).construct(800 / 8, 480 / 8);
Framebuffer->var bloom_blur_y_framebuffer = new(Framebuffer).construct(800 / 8, 480 / 8);
Framebuffer->var bloom_combine_framebuffer = new(Framebuffer).construct(800, 480);
Framebuffer->var motion_blur_framebuffer = new(Framebuffer).construct(800, 480);

// loading quad

Ivx->var quad_ivx = new(Ivx).construct("perm/development/quad.ivx");

// shader stuff

Shader->var draw_shader = new(Shader).construct((import_data shaders/draw-vert.asl), (import_data shaders/draw-frag.asl));
var draw_shader_mvp_matrix = draw_shader.find("inform_mvp_matrix");
var draw_shader_texture = draw_shader.find("inform_texture");

Shader->var bloom_threshold_shader = new(Shader).construct((import_data shaders/bloom_threshold-vert.asl), (import_data shaders/bloom_threshold-frag.asl));
var bloom_threshold_shader_texture = bloom_threshold_shader.find("inform_texture");

Shader->var bloom_blur_x_shader = new(Shader).construct((import_data shaders/bloom_blur_x-vert.asl), (import_data shaders/bloom_blur_x-frag.asl));
var bloom_blur_x_shader_texture = bloom_blur_x_shader.find("inform_texture");

Shader->var bloom_blur_y_shader = new(Shader).construct((import_data shaders/bloom_blur_y-vert.asl), (import_data shaders/bloom_blur_y-frag.asl));
var bloom_blur_y_shader_texture = bloom_blur_y_shader.find("inform_texture");

Shader->var bloom_combine_shader = new(Shader).construct((import_data shaders/bloom_combine-vert.asl), (import_data shaders/bloom_combine-frag.asl));
var bloom_combine_shader_draw_texture = bloom_combine_shader.find("inform_draw_texture");
var bloom_combine_shader_bloom_texture = bloom_combine_shader.find("inform_bloom_texture");

Shader->var motion_blur_shader = new(Shader).construct((import_data shaders/motion_blur-vert.asl), (import_data shaders/motion_blur-frag.asl));
var motion_blur_shader_texture = motion_blur_shader.find("inform_texture");
var motion_blur_shader_vector = motion_blur_shader.find("inform_vector");

Shader->var dof_x_shader = new(Shader).construct((import_data shaders/dof_x-vert.asl), (import_data shaders/dof_x-frag.asl));
var dof_x_shader_texture = dof_x_shader.find("inform_texture");
var dof_x_shader_depth_texture = dof_x_shader.find("inform_depth_texture");

print "Hello\n";
print "Hello\n";
print "Hello\n";
print "Hello\n";
print "Hello\n";
print "Hello\n";
print "Hello\n";




// camera

Joystick->var joystick = new(Joystick).construct(1);
Matrix->var mvp_matrix = new(Matrix).construct();
Camera->var camera = new(Camera).construct(Camera.TYPE_FIRST_PERSON, mvp_matrix, joystick);
camera.py = 1.0;

// loop stuff

var events = new(Events);
var motion_blur_vector = new(16);

var previous_rx = 0;
var previous_ry = 0;

loop {
	// prepare drawing
	
	camera.update Video.fps() + 1;
	var texture_slot = 0;
	var texture_slot1 = 1;
	
	// draw pass
	
	draw_framebuffer.bind();
	Video.clear 0, 0, 0, 1.0;
	Gl.bind_texture texture_slot, texture;
	
	draw_shader.use();
	draw_shader.inform draw_shader_mvp_matrix, Shader.INFORM_TYPE_FIXED | Shader.INFORM_SIZE_MATRIX, camera.mvp_matrix;
	draw_shader.inform draw_shader_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot;
	
	Gl.attribute 0, ?(ivx.attribute_components + 00), ?(ivx.attribute_pointers + 00);
	Gl.attribute 1, ?(ivx.attribute_components + 08), ?(ivx.attribute_pointers + 08);
	Gl.attribute 2, ?(ivx.attribute_components + 16), ?(ivx.attribute_pointers + 16);
	
	Gl.draw ivx.index_count, ivx.index_pointer;
	
	// bloom threshold pass
	
	bloom_threshold_framebuffer.bind();
	Video.clear 0, 0, 0, 1.0;
	Gl.bind_texture texture_slot, draw_framebuffer.colour_texture;
	
	bloom_threshold_shader.use();
	bloom_threshold_shader.inform bloom_threshold_shader_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot;
	
	Gl.attribute 0, ?(quad_ivx.attribute_components + 00), ?(quad_ivx.attribute_pointers + 00);
	Gl.draw quad_ivx.index_count, quad_ivx.index_pointer;
	
	// bloom blur x pass
	
	bloom_blur_x_framebuffer.bind();
	Video.clear 0, 0, 0, 1.0;
	Gl.bind_texture texture_slot, bloom_threshold_framebuffer.colour_texture;
	
	bloom_blur_x_shader.use();
	bloom_blur_x_shader.inform bloom_blur_x_shader_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot;
	
	Gl.attribute 0, ?(quad_ivx.attribute_components + 00), ?(quad_ivx.attribute_pointers + 00);
	Gl.draw quad_ivx.index_count, quad_ivx.index_pointer;
	
	// bloom blur y pass
	
	bloom_blur_y_framebuffer.bind();
	Video.clear 0, 0, 0, 1.0;
	Gl.bind_texture texture_slot, bloom_blur_x_framebuffer.colour_texture;
	
	bloom_blur_y_shader.use();
	bloom_blur_y_shader.inform bloom_blur_y_shader_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot;
	
	Gl.attribute 0, ?(quad_ivx.attribute_components + 00), ?(quad_ivx.attribute_pointers + 00);
	Gl.draw quad_ivx.index_count, quad_ivx.index_pointer;
	
	// bloom combine pass
	
	bloom_combine_framebuffer.bind();
	Video.clear 0, 0, 0, 1.0;
	
	Gl.bind_texture texture_slot, draw_framebuffer.colour_texture;
	Gl.bind_texture texture_slot1, bloom_blur_y_framebuffer.colour_texture;
	
	bloom_combine_shader.use();
	bloom_combine_shader.inform bloom_combine_shader_draw_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot;
	bloom_combine_shader.inform bloom_combine_shader_bloom_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot1;
	
	Gl.attribute 0, ?(quad_ivx.attribute_components + 00), ?(quad_ivx.attribute_pointers + 00);
	Gl.draw quad_ivx.index_count, quad_ivx.index_pointer;
	
	// motion blur pass
	
	motion_blur_framebuffer.bind();
	Video.clear 0, 0, 0, 1.0;
	
	Gl.bind_texture texture_slot, bloom_combine_framebuffer.colour_texture;
	
	?(motion_blur_vector + 00) = (camera._rx - previous_rx) * 20;
	?(motion_blur_vector + 08) = (camera._ry - previous_ry) * 20;
	
	previous_rx = camera._rx;
	previous_ry = camera._ry;
	
	motion_blur_shader.use();
	motion_blur_shader.inform motion_blur_shader_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot;
	motion_blur_shader.inform motion_blur_shader_vector, Shader.INFORM_TYPE_FIXED | Shader.INFORM_SIZE_VECTOR_2, motion_blur_vector;
	
	Gl.attribute 0, ?(quad_ivx.attribute_components + 00), ?(quad_ivx.attribute_pointers + 00);
	Gl.draw quad_ivx.index_count, quad_ivx.index_pointer;
	
	// dof pass
	
	Framebuffer.unbind();
	Video.clear 0, 0, 0, 1.0;
	
	Gl.bind_texture texture_slot, motion_blur_framebuffer.colour_texture;
	Gl.bind_texture texture_slot1, draw_framebuffer.depth_texture;
	
	dof_x_shader.use();
	dof_x_shader.inform dof_x_shader_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot;
	dof_x_shader.inform dof_x_shader_depth_texture, Shader.INFORM_TYPE_WHOLE | Shader.INFORM_SIZE_VALUE, &texture_slot1;
	
	Gl.attribute 0, ?(quad_ivx.attribute_components + 00), ?(quad_ivx.attribute_pointers + 00);
	Gl.draw quad_ivx.index_count, quad_ivx.index_pointer;
	
	// flip and process events
	
	//~ batch.draw();
	Video.flip();
	
	events.get();
	if (events.quit) break
}

return 0;
